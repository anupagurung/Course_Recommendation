# -*- coding: utf-8 -*-
"""Course Recommendation on the based on user,item,svd.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IZz6cnjTp-l6KwC5zws5I619i0HWmkcV
"""

# Step 1: Install and import necessary libraries
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from scipy.sparse.linalg import svds

# Step 2: Load the ratings data
rating_url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-ML321EN-SkillsNetwork/labs/datasets/ratings.csv"
rating_df = pd.read_csv(rating_url)

# Inspect the ratings data
print(rating_df.head())

# Step 3: Create a user-item matrix where rows represent users and columns represent courses
user_item_matrix = rating_df.pivot(index='user', columns='item', values='rating').fillna(0)

# Step 4: Compute the cosine similarity between users
user_similarity = cosine_similarity(user_item_matrix)
user_similarity_df = pd.DataFrame(user_similarity, index=user_item_matrix.index, columns=user_item_matrix.index)

# Step 5: User-Based Collaborative Filtering
def user_based_recommendation(user_id, n=10):
    similar_users = user_similarity_df[user_id].sort_values(ascending=False).index[1:]
    recommended_courses_list = []
    for similar_user in similar_users:
        similar_user_ratings = user_item_matrix.loc[similar_user]
        recommended_courses_list.extend(similar_user_ratings[similar_user_ratings > 0].index.tolist())
        if len(recommended_courses_list) >= n:
            break
    recommended_courses = pd.Series(recommended_courses_list)
    recommended_courses = recommended_courses.groupby(recommended_courses).count()
    return recommended_courses.sort_values(ascending=False).head(n).index.tolist()

# Step 6: Compute the cosine similarity between courses (items)
item_similarity = cosine_similarity(user_item_matrix.T)
item_similarity_df = pd.DataFrame(item_similarity, index=user_item_matrix.columns, columns=user_item_matrix.columns)

# Step 7: Item-Based Collaborative Filtering
def item_based_recommendation(user_id, n=10):
    # Get the ratings of the user for all courses
    user_ratings = user_item_matrix.loc[user_id]

    # List to hold the similarity scores for each course
    similar_courses_list = pd.Series(dtype=float)

    # Iterate through each course the user has rated
    for course_id, rating in user_ratings[user_ratings > 0].items():
        # Get the similarity scores for the course and scale them by the user's rating
        similar_courses = item_similarity_df[course_id] * rating
        similar_courses_list = similar_courses_list.add(similar_courses, fill_value=0)

    # Remove the courses the user has already rated
    similar_courses_list = similar_courses_list.drop(user_ratings[user_ratings > 0].index, errors='ignore')

    # Return the top N recommended courses
    return similar_courses_list.sort_values(ascending=False).head(n).index.tolist()

# Example: Get top 10 item-based recommended courses for a specific user
print(f"Item-Based Recommendations for User {1889878}:")
print(item_based_recommendation(1889878))

# Step 8: SVD-Based Collaborative Filtering
user_item_matrix_array = user_item_matrix.to_numpy()
U, sigma, Vt = svds(user_item_matrix_array, k=50)
sigma = np.diag(sigma)
predicted_ratings = np.dot(np.dot(U, sigma), Vt)
predicted_ratings_df = pd.DataFrame(predicted_ratings, columns=user_item_matrix.columns, index=user_item_matrix.index)

def svd_recommendation(user_id, n=10):
    user_predictions = predicted_ratings_df.loc[user_id]
    user_ratings = user_item_matrix.loc[user_id]
    recommendations = user_predictions[user_ratings == 0]
    return recommendations.sort_values(ascending=False).head(n).index.tolist()

# Step 9: Generate recommendations for each user using all three methods
user_recommendations = {}
for user in rating_df['user'].unique():
    user_recommendations[user] = {
        'user_based': user_based_recommendation(user),
        'item_based': item_based_recommendation(user),
        'svd_based': svd_recommendation(user)
    }

# Step 10: Save the recommendations to a CSV file
recommendations_df = pd.DataFrame.from_dict(user_recommendations, orient='index')
recommendations_df.to_csv('user_course_recommendations.csv', index_label='user_id')

print("Course recommendations for each user have been saved to 'user_course_recommendations.csv'")